{"version":"790a2b520144ce95","fileName":"AbstractQueuedSynchronizer.java","fileSimpleName":"AbstractQueuedSynchronizer","fileType":"java","notes":{"388":"当前node的waitStatus \u003d -1 ，后面node中的线程可以被唤醒","645":"将头结点的waitStatus设置为0","1673":"将之前条件队列的节点waitStatus从-2设置为0，放边后续操作","1682":"构建同步队列并入队，或入队","1684":"node节点的上一个节点的waitStatus为-1，这样才能保证唤醒当前node中的thread","661":"唤醒形参node的下一个线程","1685":"正常情况下并不会通过此处执行解锁逻辑","1302":"负数调用共享锁","1303":"调用共享锁","802":"说明node的状态是CANCELLED\u003d1，要被剔除","1954":"获取单链表的头结点","1197":"尝试加锁","685":"只有head的waitStatus\u003d-1时，才能唤醒下一个节点","431":"CANCELLED、signal、conditon、propagate 都与waitStatus有关","1199":"通过acquireQueued 返回值判断是否需要中断","691":"将当前的head的waitStatus设置为-3","1722":"释放独占锁","1854":"条件队列使用单链表结构，使用nextWaiter连接下一个节点","1856":"构建队列，指定队列的头结点","1858":"当条件队列已经存在了，新的node加入时，就是将之前的尾结点的nextWaiter指向新的node","835":"park内部可以识别中断标记并被唤醒","1859":"1.新构建的队列，头结点和尾结点都是同一个元素\n2.已存在的条件队列，将新入队的节点赋值为尾结点","836":"返回是否被中断，并清除中断标志","709":"设置当前节点为新的head","586":"创建链表的头结点，使用cas，在大量线程并行时，也能保证只创建一个头结点，第一个头结点是不包含线程的空节点","587":"初始化双向链表后，头和尾都是同一个节点","589":"当前节点入队，当前node的prev执行上一个节点","590":"将当前node通过cas设置成tail","591":"将上一个尾结点的next指向当前node","592":"唯一的出口，保证当前node一定能入队，返回当前节点的上一个节点","985":"获取上一个节点","729":"判断新head的下一个节点是不是共享模式","730":"共享锁，继续唤醒下一个节点。这样设计1.可以提高并发量2.当semaphore的值\u003e1时，可能会释放多个资源，如果不持续欢喜，会造成资源浪费。这也是和独占锁的一个区别","986":"当前节点被 head唤醒了，在获取head节点","987":"尝试获取锁","1883":"将头结点和尾结点设置为null，作用是清空链表","988":"获取锁成功","604":"Node 是双向链表","861":"获取node的上一个节点","989":"获取锁成功，将当前节点设置为head","605":"生成共享或独占模式","1885":"通过之前的首节点获取下一个节点","990":"回收上一个head","1886":"将之前的首节点和次节点断开连接","862":"尝试获取独占锁","1887":"将条件队列的节点转到同步队列","863":"如果node是次节点，则设置node为头结点","1888":"将之前队列的次节点变为首节点","1889":"循环直到所有的节点都出队","995":"shouldParkAfterFailedAcquire：\n将waitStatus设置为-1 ，只有head的waitStatus\u003d-1时，才能唤醒下一个节点","996":"park并检查中断","869":"调用park并检查中断，清除中断标志位是为了不影响后续加锁","1260":"释放锁，因为当前处于独占状态所以不需要加任何锁","1261":"获取head节点，如果head的thread为空，意味着代表当前的线程","1263":"唤醒同步队列下一个node线程","2034":"添加条件等待队列","2035":"释放独占锁","2037":"不是同步队列，因为线程满员时，最后一个线程会将条件队列中的节点转到同步队列中","2038":"阻塞线程","2042":"获取reentrantLock，或阻塞","381":"共享锁","383":"独占锁"}}